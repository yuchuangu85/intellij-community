cannot.perform.the.refactoring=Cannot perform the refactoring.\n
extract.class.title=Extract Delegate
extract.class.from.label=Extract delegate from {0}
name.for.new.class.label=&Name for new class:
choose.destination.package.label=Choose Destination Package
package.for.new.class.label=&Package name:
members.to.extract.label=Mem&bers to Extract
there.already.exists.a.class.with.the.chosen.name=There already exists a class with the chosen name.
introduce.parameter.object=Introduce Parameter Object
the.caret.should.be.positioned.within.a.class.to.be.refactored=The caret should be positioned within a class to be refactored.
the.selected.class.is.an.enumeration=The selected class is an enumeration.
remove.middleman=Remove Middleman
the.caret.should.be.positioned.at.the.name.of.the.field.to.be.refactored=The caret should be positioned at the name of the field to be refactored.
field.selected.is.not.used.as.a.delegate=Field selected is not used as a delegate.
wrap.return.value=Wrap Return Value
the.caret.should.be.positioned.at.the.name.of.the.method.to.be.refactored=The caret should be positioned at the name of the method to be refactored, inside parameters list or inside method call.
method.selected.returns.void=Method selected returns 'void'.
constructor.returns.can.not.be.wrapped=Constructor returns cannot be wrapped.
wrap.return.value.title=Wrap Return Value
method.to.wrap.returns.from.label=Method to wrap returns from:
method.whose.return.are.to.wrapped=Method whose return are to wrapped
references.to.be.modified.usage.view=References to be modified {0}
reference=reference
remove.middleman.field.header=Remove middleman field:
references.to.expose.usage.view=References to expose {0}
remove.middleman.title=Remove Middleman
refactor=Refactor
preview=Preview
wrapped.return.command.name=Wrapped return as {0} for {1}()
exposed.delegation.command.name=Exposed delegation to {0}
annotation=Annotation
the.selected.class.is.an.interface=The selected class is an interface.
the.selected.class.is.an.annotation.type=The selected class is an annotation type.
the.refactoring.is.not.supported.on.non.static.inner.classes=The refactoring is not supported on non-static inner classes.
the.selected.class.has.no.members.to.extract=The selected class has no members to extract.
references.to.extract=References to extract
extracting.from.class=Extracting from class:
extracted.class.command.name=Extracted class {0}
method.selected.has.no.parameters=Method selected has no parameters.
parameter=Parameter
the.selected.method.cannot.be.wrapped.because.it.is.defined.in.a.non.project.class=The selected method cannot be wrapped because it is defined in a non-project class
select.wrapper.class=Select parameter class
could.not.find.selected.wrapping.class=Could not find selected wrapping class
there.already.exists.a.class.with.the.selected.name=There already exists a class with the selected name

